Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }

Code :-

 public class Main {
    public static void main(String[] args) {
        int[] X = {0, 2, 0, 3, 0, 5, 6, 0, 0};
        int[] Y = {1, 8, 9, 10, 15};
        mergeArrays(X, Y);

        System.out.println(arrayToCurlyString(X));
    }

    public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;

        int l = m - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (X[i] != 0) {
                X[l] = X[i];
                l--;
            }
        }

        int i = l + 1;
        int j = 0;
        l = 0;

        while (i < m && j < n) {
            if (X[i] <= Y[j]) {
                X[l++] = X[i++];
            } else {
                X[l++] = Y[j++];
            }
        }

        while (j < n) {
            X[l++] = Y[j++];
        }
    }

    public static String arrayToCurlyString(int[] array) {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        for (int i = 0; i < array.length; i++) {
            if (i > 0) {
                sb.append(", ");
            }
            sb.append(array[i]);
        }
        sb.append("}");
        return sb.toString();
    }
}


Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199

Code :- 

public class MaxSumPath {
    public static void main(String[] args) {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };

        int maxSum = findMaxSumPath(X, Y);
        System.out.println("The maximum sum is: " + maxSum);
    }

    private static int findMaxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;

        int k = 0, l = 0;
        int sumX = 0, sumY = 0;
        int res = 0;

        while (k < m && l < n) {
            if (X[k] < Y[l]) {
                sumX += X[k++];
            } else if (X[k] > Y[l]) {
                sumY += Y[l++];
            } else {
                res += Math.max(sumX, sumY) + X[k];
                sumX = 0;
                sumY = 0;
                k++;
                l++;
            }
        }

        while (k < m) {
            sumX += X[k++];
        }

        while (l < n) {
            sumY += Y[l++];
        }

        res += Math.max(sumX, sumY);

        return res;
    }
}


Q3:Write a Java Program to count the number of words in a string using HashMap.

Code :-  

import java.util.HashMap;
import java.util.Map;

public class Main {
	
    public static void main(String args[]) {
    	
        String s1 = "Hello! My name is Vaibhavi!";
        s1 = s1.replaceAll("[^a-zA-Z ]", ""); 
        String[] splitted = s1.toLowerCase().split(" "); 

        Map<String, Integer> hm = new HashMap<>();

        for (String word : splitted) {
            if (hm.containsKey(word)) {
                int count = hm.get(word);
                hm.put(word, count + 1);
            } else {
                hm.put(word, 1);
            }
        }

        int total_Words = splitted.length;
        System.out.println("Number of words: " + total_Words);

    }
}
Output :- Number of words: 5

Q4:Write a Java Program to find the duplicate characters in a string.

Code : 

import java.util.HashMap;
import java.util.Map;

public class Main {

	public static void main(String[] args) {
		
		String str = "Hello! Vaibhavi this side";
        findDup(str);

	}

	private static void findDup(String str) {
		
		Map<Character, Integer> charCount = new HashMap<>();

        
        char[] characters = str.toCharArray();

        for (char chr : characters) {
            
            if (chr != ' ' && chr != ',' && chr != '!') {
                
                if (charCount.containsKey(chr)) {
                    charCount.put(chr, charCount.get(chr) + 1);
                } else {
                    
                    charCount.put(chr, 1);
                }
            }
        }

        
        System.out.println("Duplicate characters in string:");
        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println(entry.getKey());
            }
        }
		
	}

}

Output :- 
Duplicate characters in string:
a
e
h
i
l
s


 

